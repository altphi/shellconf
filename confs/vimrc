" vim:tabstop=2:shiftwidth=2:expandtab:foldenable:textwidth=79:foldmethod=indent:foldtext=

execute pathogen#infect()
" current projects
  command! Platform :execute PlatformEdit()

" vim variables
  set term=xterm-256color
  set tabstop=2
  set shiftwidth=2
  set expandtab
  set nocompatible
  set cursorline
  set autoread
  set viminfo='1000,f1,<500
  set showmatch
  set ignorecase smartcase
  set autoindent
  set smartindent
  set shiftround
  set lisp
  set vb t_vb=
  set ruler
  set incsearch
  set virtualedit=all
  set background=dark
  set complete=.,w,b,u,i,]
  set showcmd
  set nohls
  set backspace=indent,eol,start
  set autochdir
  set hidden
  set hlsearch
  set wildchar=<Tab> wildmenu wildmode=full
  set wildcharm=<C-Z>
  set dictionary=/usr/share/dict/words
  nnoremap <silent> <F7> :NERDTreeToggle<CR>
  nnoremap <silent> <F8> :TagbarToggle<CR>
  nnoremap <F9> :b <C-Z>
  set switchbuf+=useopen,usetab
  set wildignore+=*.swp,*.zip
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_by_filename = 1
  "let g:ctrlp_user_command = 'find %s'
  let g:ctrlp_cmd = 'CtrlPBuffer'
  " let g:ctrlp_user_command = {
  " \    'types': {
  " \    1: ['.git', 'cd %s && git ls-files'],
  " \    },
  " \    'fallback': 'find %s' }
  let g:ctrlp_max_height = 40
  nnoremap ,t  :CtrlPTag <CR>
  filetype plugin indent on
  let g:clojure_align_multiline_strings = 1
  let g:clojure_align_subforms = 1
"  let g:clojure_fold = 1
"  let g:AutoPairsShortcutFastWrap = '<C-e>'

" Appearance
  colorscheme molokai
  syntax on
  if &t_Co == 8 && $TERM !~# '^linux'
    set t_Co=16
  endif
  if &encoding ==# 'latin1' && has('gui_running')
    set encoding=utf-8
    set macmeta
  endif
  if has("gui_running")
    set transparency=30
    set guioptions=egmtA
    "set guifont=Clear\ Sans\ Thin:h14
    set guifont=Source\ Code\ Pro:h14
    set fuoptions=maxvert,maxhorz
    au GUIEnter * set fullscreen
    noremap <D-1> :tabn 1<CR>
    noremap <D-2> :tabn 2<CR>
    noremap <D-3> :tabn 3<CR>
    noremap <D-4> :tabn 4<CR>
    noremap <D-5> :tabn 5<CR>
    noremap <D-6> :tabn 6<CR>
    noremap <D-7> :tabn 7<CR>
    noremap <D-8> :tabn 8<CR>
    noremap <D-9> :tabn 9<CR>
    noremap <D-0> :tablast<CR>
  endif
  if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
    if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
      let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
    endif
  endif
  set list

  " OLD: show whitespace at end of lines
  " highlight ExtraWhitespace ctermbg=White guibg=White
  " autocmd ColorScheme * highlight ExtraWhitespace ctermbg=White guibg=White
  " match ExtraWhitespace /\s\+$/
  " autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  " autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  " autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  " autocmd BufWinLeave * call clearmatches()
  " hi CursorLine  cterm=NONE guibg=#003399

  " status line
  set statusline=%F         "tail of the filename
  set statusline+=\ \ \ \ %{fugitive#statusline()}
  set statusline+=%=        "left/right separator
  set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
  set statusline+=%{&ff}]\  "file format
  set statusline+=%h\       "help file flag
  set statusline+=%m\       "modified flag
  set statusline+=%r\       "read only flag
  set statusline+=%y\       "filetype
  set statusline+=%c,\      "cursor column
  set statusline+=%l/%L     "cursor line/total lines
  set statusline+=\ %P      "percent through file
  set laststatus=2
  if version >= 700
    au InsertEnter * hi StatusLine ctermbg=Black ctermfg=White guibg=LightBlue guifg=Black gui=none
    au InsertLeave * hi StatusLine ctermbg=Brown ctermfg=Black guibg=#c2bfa5 guifg=black gui=none
  endif
  hi link EasyMotionTarget ErrorMsg
  hi link EasyMotionShade Comment
  hi link EasyMotionTarget2First MatchParen
  hi link EasyMotionTarget2Second MatchParen

" Key Bindings & Mappings
  map <F4> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
  map <D-[> <C-W>h
  map <D-]> <C-W>l
  vmap YY y:echo system('pbcopy', @")<CR>
  nmap yc "*yy
  nmap yr yab :echo system('socat - TCP:localhost:37146', @")<CR>
  nmap yv yw :echo system('socat - TCP:localhost:37146', @")<CR>
  nmap pr :echo system('socat - TCP:localhost:37146', @")<CR>
  " vmap ttt y'>i <ESC>`<v`>ly :let @a=system('tr -d \\r\\n \| markdown \| ~/bin/strip-html-tags', @")<CR>zo'>0x`<:echo system('ttytter -script', @a)<CR>
  vmap ttt y:let @a=system('markdown \| ~/bin/strip-html-tags', @")<CR>:echo system('ttytter -script', @a)<CR>
  "nmap ybb lBmUyEo<ESC>0P:.!~/bin/bitly<CR>yE`UviWpjdd`U
  nmap ybb viWx:let @a=system('sed "s/&/\%26/g"', @")<CR>:let @b=system('~/bin/bitly', @a)<CR>"bp
  vmap tmb y:echo system('tumblr pipe --host=altphi.tumblr.com', @")<CR>:let @a=system('~/bin/tumblr-latest-url')<CR>:let @b=system('~/bin/bitly', @a)<CR>`<"bpkJ<CR>`<v`>
  map fbp y:let @a=system('sed 1d \| markdown', @")<CR>:let @b=system('head -n 1 \| markdown \| ~/bin/strip-html-tags', @")<CR>:execute "\!fbcmd feednote " . shellescape(@b) . " " . shellescape(@a)<CR>`<v`>
  map fbs y:let @b=system('markdown \| ~/bin/strip-html-tags', @")<CR>:execute "!fbcmd status " . shellescape(@b)<CR>`<v`>
  map pall fbptmb<ESC>`<yy:let @a=system('markdown \| ~/bin/strip-html-tags', @")<CR>:echo system('ttytter -script', @a)<CR>
  map pol y:let @a=system('head -n 1 \| markdown \| ~/bin/strip-html-tags \| tr -d "\r\n"', @")<CR>:let @b=system('sed 1,2d \| head -n 1 \| markdown \| ~/bin/strip-html-tags \| tr -d "\r\n"', @")<CR>:let @c=@b . " " . @a<CR>:echo system ('ttytter -script', @c)<CR>`<v`>pol-Tfbstmb
  map pol-T y:let @a=system('head -n 1 \| markdown \| ~/bin/strip-html-tags \| tr -d "\r\n"', @")<CR>:let @b=system('sed 1,4d \| head -n 1 \| markdown \| ~/bin/strip-html-tags \| tr -d "\r\n"', @")<CR>:let @c=@b . " " . @a<CR>:echo system ('ttytter -script', @c)<CR>
  map fff ?{{<CR>i{<ESC>
  " yank current file's directory
  map yfd :let @a = expand("%:p:h")<CR>:echo system('pbcopy', @a)<CR>
  " nmap <F10> /^(<CR>
  " nmap <S-F10> ?^(<CR>
  nmap <F11> /(<CR>
  nmap <S-F11> ?(<CR>
  imap <C-J> <Plug>snipMateNextOrTrigger
  smap <C-J> <Plug>snipMateNextOrTrigger
  nmap H :h <C-R>=expand("<cword>")<CR><CR>
  "nmap ' <Plug>(easymotion-bd-f)(
  " nmap <Space> <Plug>(easymotion-bd-jk)
  " nmap <Space> <Plug>(easymotion-bd-f)

" surrounds
  vmap si y`<i_<ESC>`>la_<ESC>
  vmap sp y`<i(<ESC>`>la)<ESC>
  vmap sq y`<i"<ESC>`>la"<ESC>
  vmap st y`<i` <ESC>`>la `<ESC>
  vmap s[ y`<i[[<ESC>`>lla]]<ESC>
  vmap s{ y`<i{<ESC>`>la}<ESC>
  vmap sf y`<i{{{ <ESC>`>o}}}<ESC>
  nmap ,) f(%a)<ESC>

" nmap <leader>) f(%a)<ESC><CR>
nmap <leader>cd cd %:h<CR>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" open the file under the cursor
" map gf :!open <C-R><C-P><CR>

" command mode in Greek
  nmap χ x
  nmap ι i
  nmap δς dw
  nmap ξ j
  nmap κ k
  nmap η h
  nmap λ l
  nmap δδ dd
  nmap ο o
  nmap Π P
  nmap π p
  nmap β b
  nmap Β B
  nmap ¨ :
  nmap α a
  nmap ε e
  nmap υς yw
  nmap ρ r

" custom commands
  command! -nargs=1 Grep vimgrep /<args>/j ** <Bar> cw
  command! GREP :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
  command! Sh read !cat ~/n/bash_args /!
  command! WC :w !wc
  command! RC :e ~/.vimrc
  command! RCload :so ~/.vimrc
  command! CDcurrent :cd %:p:h

" Autocompletion
  filetype on
  set completeopt=longest,menuone
  autocmd Filetype * setlocal omnifunc=syntaxcomplete#Complete
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
  let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
  let g:SuperTabContextDiscoverDiscovery =  ["&omnifunc:<c-x><c-o>", "&omnifunc:<c-x><c-p>"]
  let g:SuperTabContextDefaultCompletionType = "<c-p>"

" vimWiki
  set nocompatible
  filetype plugin on
  syntax on
  let g:vimwiki_table_auto_fmt = 0
  let g:vimwiki_table_mappings = 0
  let g:vimwiki_camel_case = 1
  let g:vimwiki_auto_checkbox = 1
  let g:vimwiki_use_mouse=1
  nmap <leader>tt <Plug>VimwikiToggleListItem
  let g:vimwiki_list = [{'path': '~/Documents/vimwiki/', 'syntax': 'markdown'}]
  " vim:nofoldenable
  " also, for HTML output, change the below in autoload/vimwiki/html.vim (and
  " the lines between these two as well
  " if !pre[0] && a:line =~ '^\s*{{{'   AND
  " elseif pre[0] && a:line =~ '^\s*}}}\s*$'
  " nnoremap <Leader>[ lbi[[<Esc>ea]]<Esc>
  " vnoremap <Leader>[ lbi[[<Esc>ea]]<Esc>
  let g:vimwiki_folding=''
  au BufNew *.wiki set foldmethod=indent

" functions
  function! PlatformEdit()
    :cd /content/quickcue-bucket/platform/src/platform
    :e .
  endfunction

  command! Cleantail :exe "normal mj"<CR>:%s#\s*\r\?$##<CR>:exe "normal `j"<CR>

"  function! InsertTabWrapper(direction)
"    let col = col('.') - 1
"    if !col || getline('.')[col - 1] !~ '\k'
"        return "\<tab>"
"    elseif "backward" == a:direction
"        return "\<c-p>"
"    else
"        return "\<c-n>"
"    endif
"  endfunction
"  inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
"  inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>

" Folding
set foldmethod=marker
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" autocmds
  " leave insert mode for new buffers
  autocmd BufNewFile * stopinsert
  " see http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
  autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
  autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
  " open tagbar for certain filetypes
  autocmd BufNew *.clj TagbarOpen
  " remove trailing spaces always before save
  ""au BufWritePre * Cleantail

" vim custom fold display function
  " function! CustomFoldText()
  " slightly altered function via
  " http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/
  "    "get first non-blank line
  "    let fs = v:foldstart
  "    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  "    endwhile
  "    "if fs > v:foldend
  "    "    let line = getline(v:foldstart)
  "    "else
  "    "    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  "    "endif
  "    let line = substitute(line, "{{", '', 'g')
  "    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  "    let foldSize = 1 + v:foldend - v:foldstart
  "    let foldSizeStr = " " . foldSize . " lines "
  "    let foldLevelStr = repeat("+--", v:foldlevel)
  "    let lineCount = line("$")
  "    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  "    let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  "    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
  "endf
  "set foldtext=CustomFoldText()
  function! MyFoldText()
      let loopy = 0
      let foldstart = v:foldstart
      let linenumb = v:foldstart
      while loopy == 0 && linenumb <= v:foldend
          let line = getline(linenumb)
          let matchtest = matchstr(line,"tags: ")
          if matchtest == "tags: "
              let loopy = 1
          else
              let linenumb = linenumb + 1
          endif
      endwhile
      if loopy == 0
          let line = getline(foldstart)
          let line = substitute(line, "{{{ ", "", "")
      else
          let line = substitute(line, "tags: ", "", "")
      endif
      let linecount = v:foldend - v:foldstart
      return v:folddashes . " " . linecount . " lines: " . line
  endfunction
  set foldtext=MyFoldText()

" rainbow parens
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" paredit on by default
let g:paredit_mode = 1
au BufNew,BufNewFile,BufReadPost * :execute PareditInitBuffer()

" :h restore-cursor
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

au BufNewFile,BufRead *.pgsql setf pgsql
